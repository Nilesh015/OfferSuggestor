/* ----------------------------------------------------------------------------------------------------------------------
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
---------------------------------------------------------------------------------------------------------------------- */
/*
 * Offers Data API
 * The Offers Data API provides developers a quick and easy way to retrieve offer information from VMORC. The API allows you to retrieve all your available offers or retrieve specific offers. In an offer-specific request, you may choose to filter your accessible offers by certain offer attributes or you may request for offers by its identifiers.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.visa.developer.sample.offers_data_api.api;

import com.visa.developer.sample.offers_data_api.ApiClient;
import java.math.BigDecimal;
import com.visa.developer.sample.offers_data_api.model.RetrieveAllOffersgetResponse;
import com.visa.developer.sample.offers_data_api.model.RetrieveOffersByContentIdgetResponse;
import com.visa.developer.sample.offers_data_api.model.RetrieveOffersByFiltergetResponse;
import com.visa.developer.sample.offers_data_api.model.RetrieveOffersByOfferIdgetResponse;

import java.io.IOException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.Ignore;
import org.threeten.bp.LocalDateTime;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZonedDateTime;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.temporal.ChronoUnit;


import java.util.*;


/**
 * API tests for OffersDataApiApi
 */
public class OffersDataApiApiTest {

    private final OffersDataApiApi api;

    public OffersDataApiApiTest(){
        System.out.println("\nProduct Name: Visa Merchant Offers Resource Center\nApi Name: Offers Data API");
        ApiClient apiClient = new ApiClient();
        // Configure HTTP basic authorization: basicAuth
        apiClient.setUsername("YOUR USERNAME");
        apiClient.setPassword("YOUR PASSWORD");
        apiClient.setKeystorePath("YOUR KEYSTORE PATH");
        apiClient.setKeystorePassword("YOUR KEYSTORE PASSWORD");
        apiClient.setPrivateKeyPassword("YOUR PRIVATEKEY PASSWORD");

        // To set proxy uncomment the below lines
        // apiClient.setProxyHostName("proxy.address@example.com");
        // apiClient.setProxyPortNumber(0000);
        api = new OffersDataApiApi(apiClient);
    }


    /**
     *
     *
     * Request for all offers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getretrieveAllOffersTest() throws IOException {

        ObjectMapper mapper = new ObjectMapper();
        RetrieveAllOffersgetResponse response = api.getretrieveAllOffers( null,  null);

        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(response);
        System.out.println(json);
    }

    /**
     *
     *
     * Request for offers by content id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getretrieveOffersByContentIdTest() throws IOException {


        String contentid = Arrays.asList("contentid_example").get(0);


        RetrieveOffersByContentIdgetResponse response = api.getretrieveOffersByContentId(contentid,  null,  null,  null,  null);
    }

    /**
     *
     *
     * Request for offers by filter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getretrieveOffersByFilterTest() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        RetrieveOffersByFiltergetResponse response = api.getretrieveOffersByFilter( null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  3,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null,  null);
        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(response);
        System.out.println(json);
    }

    /**
     *
     *
     * Request for offers by an offer id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getretrieveOffersByOfferIdTest() throws IOException {


        String offerid = Arrays.asList("102355").get(0);

        ObjectMapper mapper = new ObjectMapper();
        RetrieveOffersByOfferIdgetResponse response = api.getretrieveOffersByOfferId(offerid,  null,  null,  null,  null);
        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(response);
        System.out.println(json);
    }


    public String transformPayload(String payload){
        payload = editLocalTime(payload);
        payload = addRandomValue(payload);
        return payload;
    }

    public String editLocalTime(String payload){
        ZoneId zoneId = ZoneId.of("America/Los_Angeles");
        LocalDateTime localDateTime = LocalDateTime.now().truncatedTo(ChronoUnit.SECONDS);
        ZonedDateTime laDateTime = ZonedDateTime.of(localDateTime,zoneId);
        payload = payload.replaceAll("\"localTransactionDateTime\":\\s+\".{19}\"",
                "\"localTransactionDateTime\": \""+DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(laDateTime)+"\"");
        payload = payload.replaceAll("\"dateTimeLocal\":\\s+\".{10}\"",
                "\"dateTimeLocal\": \""+DateTimeFormatter.ofPattern("MMddHHmmss").format(laDateTime)+"\"");
        return payload;
    }

    public String addRandomValue(String payload){
        String randomAlphaNumericValue = UUID.randomUUID().toString().replaceAll("-","").substring(0,8);
        Random rand = new Random();
        Integer randomNumber = rand.nextInt(90000) + 10000;
        payload = payload.replaceAll("random_string", randomAlphaNumericValue);
        payload = payload.replaceAll("random_integer", randomNumber.toString());
        payload = payload.replaceAll("random", randomAlphaNumericValue);
        return payload;
    }
}
